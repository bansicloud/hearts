<!doctype html>
<html>
  <head>
    <title>Hearts</title>
    <script src="https://unpkg.com/vue"></script>
    <%- include('partials/head') %>  

    <style>
      #game-url {
        width: 350px;
      }
    </style>
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light justify-content-between">
      <a class="navbar-brand" href="/"><i class="far fa-heart"></i> Hearts</a>
      <form class="form-inline my-2 my-lg-0">
        <div class="input-group">
          <input class="form-control disabled" id="game-url" value="URL to game" readonly>
          <div class="input-group-append">
              <button class="btn btn-outline-secondary" id="copy-game-url"><i class="far fa-clipboard"></i></button>
          </div>
        </div>
      </form>
    </nav>
    <div id="app" class="container-fluid mt-6">
      <div class="row mt-3">
        <div class="col-sm-12">
          <ul class="list-group list-group-horizontal overflow-auto">
            <li class="list-group-item d-flex flex-column align-items-center">
              <p v-if="game.round == 0">Deal to start</p>
              <p v-else>Round {{ game.round }}</p>
              <button class="btn btn-outline-success" @click="deal">Deal</button>
            </li>
            <li class="list-group-item" 
              v-for="player in game.players"
              v-bind:class="{ active: player.id == turn}">
              <div v-if="player.id == myPlayerId && editingName" class="input-group">
                <input type="text" class="form-control" v-model="game.players[me.id].name" style="width: 150px;">
                <div class="input-group-append">
                  <button class="input-group-text" @click="changeName"><i class="fas fa-save"></i></button>
                </div>
              </div>
              <div v-else>
                <h1 class="h3">
                  {{ player.name }}
                  <button v-if="player.id == myPlayerId" @click="editName" class="btn btn-outline-dark btn-sm"><i class="fas fa-pen"></i></button>
                </h1>
              </div>
              <p>Points: {{ player.points }}</p>
            </li>
          </ul>
        </div>
      </div>
      <div v-if="myPlayerId == null">
        <div class="row mt-3">
          <h1 class="h2 col-sm-12">Choose a player</h1>
        </div>
        <div class="row">
          <div class="col-sm-12">
            <ul class="list-group">
              <li v-for="player in availablePlayers" 
                class="list-group-item d-flex justify-content-between align-items-center">
                <span class="pr-5">{{ player.name }}</span>
                <button class="btn btn-primary" @click="join(player.id)">Claim</button>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div class="row mt-3">
        <div class="col-sm-6 d-flex">
          <h1 class="h2">Current trick</h1>
        </div>
      </div>
      <div class="row">
        <div class="col-sm-12">
          <p v-if="game.trick.length == 0">No cards have been played yet</p>
          <ul class="list-group list-group-horizontal list-group-flush">
            <li v-for="(card, index) in game.trick" 
              class="list-group-item px-1"
              style="border-top-width: 0px; border-bottom-width: 0">
              <div class="d-flex flex-column justify-content-center">
                <img width="75" height="105" :src="card.images.png">
                <button class="btn btn-outline-secondary mt-1" v-if="card.playerId == myPlayerId" @click="undoPlay(index)">Undo</button>
              </div>
            </li>
          </ul>
        </div>
      </div>
      <div class="row mt-3">
        <div v-if="me" class="col-sm-12">
          <div class="d-flex">
            <h1 class="h2">My cards</h1>
            <div v-if="me.cards.length > 0" class="ml-3">
              <button class="btn btn-outline-dark" @click="sort">Sort</button>
            </div>
          </div>
          <div v-if="cardInvalidReason" class="alert alert-danger col-lg-6 mt-3">
            {{ cardInvalidReason }}
          </div>
          <p v-if="me.cards.length == 0">Out of cards. <b>Deal</b> using the button in the top left corner.</p>
          <ul class="list-group list-group-horizontal list-group-flush overflow-auto">
            <li v-for="(card, index) in me.cards" 
              class="list-group-item px-1"
              style="border-top-width: 0px; border-bottom-width: 0">
              <div class="d-flex flex-column justify-content-center">
                <img width="75" height="105" :src="card.images.png">
                <button class="btn btn-outline-primary mt-1"
                  v-if="myPlayerId == turn && allPlayersTraded" 
                  @click="play(index)">Play</button>
                <div v-if="!me.traded">
                  <button class="btn btn-secondary mt-1"
                    v-if="card.traded" 
                    @click="undoTrade(index)">Undo</button>
                  <button class="btn btn-outline-primary mt-1"
                    v-else
                    @click="trade(index)">Trade</button>
                </div>
              </div>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <script>
      const gameUrl = document.getElementById('game-url');
      gameUrl.value = window.location;

      document.getElementById('copy-game-url').onclick = (e) => {
        e.preventDefault();
        gameUrl.select();
        document.execCommand('copy');
      } 
    </script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      let myPlayerId = null;
      let socketId = null;

      const socket = io();
    </script>
    <script>
      new Vue({
        el: '#app',
        data: {
          myPlayerId: null,
          editingName: false,
          cardInvalidReason: null,
          game: {
            deck: null,
            trick: [],
            turnStack: [],
            round: 0,
            roundStatus: 'WAITING TO DEAL',
            players: [{
              id: 0,
              name: 'Player 1',
              claimed: false,
              traded: false,
              points: 0,
              cards: [],
              cardsReceived: [],
              cardsFromTricks: [],
            }, {
              id: 1,
              name: 'Player 2',
              claimed: false,
              traded: false,
              points: 0,
              cards: [],
              cardsReceived: [],
              cardsFromTricks: [],
            }, {
              id: 2,
              name: 'Player 3',
              claimed: false,
              traded: false,
              points: 0,
              cards: [],
              cardsReceived: [],
              cardsFromTricks: [],
            }, {
              id: 3,
              name: 'Player 4',
              claimed: false,
              traded: false,
              points: 0,
              cards: [],
              cardsReceived: [],
              cardsFromTricks: [],
            }]
          }
        },
        created: function() {
          this.myPlayerId = myPlayerId;

          socket.on('connect', function() {
            socketId = socket.id;
          });

          socket.on('updateGame', updates => { 
            const {players, ...game} = updates;

            if (players) {
              for (let i = 0; i < 4; i++) {
                Vue.set(this.game.players, i, Object.assign({}, this.game.players[i], players[i]))
              }
            }

            this.game = Object.assign({}, this.game, game);
            console.log(updates);

            /** Commands that affect all players should only be initiated by one person
              E.g., dealing should only happen by one person, same for
                - Taking a trick (controlled by winner)
                - Ending trading (controlled by whomever goes first)

              We should keep track of the game state within a round. State can be
                - Waiting to deal
                - Waiting for trades
                - Waiting on trick
             */

              if (this.game.roundStatus == 'WAITING FOR TRADES' && this.allPlayersTraded) {
                if (this.has2C()) {
                  this.setTurnStack(this.me.id);

                  socket.emit('sendGameChanges', {
                    roundStatus: 'WAITING ON TRICK',
                    turnStack: this.game.turnStack,
                    players: this.game.players.map(p => { 
                      return {
                        cards: p.cards.concat(p.cardsReceived),
                        cardsReceived: []
                      }
                    })
                  });
                }
              } else if (this.game.roundStatus == 'WAITING ON TRICK' && this.game.trick.length == 4) {
                if (this.wonTrick()) {
                  this.endTrick();
                }
              }
          });

          socket.on('updatePlayer', (playerId, updates) => {
            Vue.set(this.game.players, playerId, Object.assign({}, this.game.players[playerId], updates));
          });

          socket.on('requestGame', (socketId) => {
            socket.emit('sendGame', socketId, this.game);
          });

          const gameId = window.location.pathname.replace('game/');
          socket.emit('join', gameId);

          socket.on('left', (socketId) => {
            for (let i = 0; i < 4; i++) {
              if (this.game.players[i].claimed == socketId) {
                this.game.players[i].claimed = false;
                return;
              }
            }
          });
        },
        computed: {
          me: function() {
            return this.myPlayerId == null ? null : this.game.players[this.myPlayerId];
          },
          availablePlayers: function() {
            return this.game.players.filter(player => !player.claimed);
          },
          turn: function() {
            return this.game.turnStack[this.game.turnStack.length - 1];
          },
          cardsToTrade: function() {
            return this.game.players[this.me.id].cards.filter(c => c.traded);
          },
          allPlayersTraded: function() {
            return this.game.players.map(p => p.traded).reduce((a, b) => a && b, true);
          },
          didBreakHearts: function() {
            return this.game.players
              .map(p => p.cardsFromTricks)
              .reduce((a, b) => a || b.find(card => card.suit == 'HEARTS' || card.code == 'QS'), false);
          }
        },
        methods: {
          deal: async function() {
            // if mid-round, confirm that you want to re-deal
            if (this.game.roundStatus != 'WAITING TO DEAL') {
              const confirmDeal = window.confirm('Re-dealing will scrap the current round and starta new one without assigning points. Are you sure you want to deal?');
              if (!confirmDeal) {
                return;
              }    
            }

            if (!this.game.deck) {
              const deck = await this.getDeck();
              this.game.deck = deck.deck_id;
            } else {
              await this.shuffle();
            }

            const cardPayload = await this.getCards();
            const cards = cardPayload.cards;

            this.game.round++; 

            let playerDiff = [null, null, null, null];

            for (let i = 0; i < 4; i++) {
              playerDiff[i] = {
                cards: [],
                cardsReceived: [],
                cardsFromTricks: [],
                traded: this.game.round % 4 == 0
              }
            }

            for (let i = 0; i < cards.length; i++) {
              const card = cards[i];
              card.numericValue = this.getNumericCardValue(card);  
            
              playerDiff[i % 4].cards.push(cards[i]);
            }

            socket.emit('sendGameChanges', {
              deck: this.game.deck,
              round: this.game.round,
              roundStatus: 'WAITING FOR TRADES',
              turnStack: [],
              trick: [],
              players: playerDiff
            });
          },
          sort: function() {
            const suitOrder = { /* black, red, black, red */
              CLUBS: 100,
              DIAMONDS: 200,
              SPADES: 300,
              HEARTS: 400,
            }

            this.me.cards.sort((a, b) => {
              const aSortValue = suitOrder[a.suit] + a.numericValue;
              const bSortValue = suitOrder[b.suit] + b.numericValue;
              
              return aSortValue - bSortValue;
            });
          },
          trade: function(cardIndex) {
            if (this.cardsToTrade.length == 3) {
              this.tradeCards();
              return;
            }

            const card = this.game.players[this.me.id].cards[cardIndex];

            Vue.set(this.game.players[this.me.id].cards, 
              cardIndex, 
              Object.assign({}, card, { traded: true }));

            if (this.cardsToTrade.length == 3) {
              this.tradeCards();
            }
          },
          tradeCards: function() {
            const receivingPlayerId = this.getTradePartner(this.game.round);
            let playerDiff = [null, null, null, null];

            playerDiff[this.me.id] = {
              cards: Object.assign([], this.game
                .players[this.me.id]
                .cards
                .filter(c => !c.traded)),
              traded: true
            }

            playerDiff[receivingPlayerId] = {
              cardsReceived: Object.assign([], this.cardsToTrade)
            }

            socket.emit('sendGameChanges', { 
              players: playerDiff
            });
          },
          undoTrade: function(cardIndex) {
            const card = this.game.players[this.me.id].cards[cardIndex];
            card.traded = false;
          },
          play: function(cardIndex) {
            if (this.me.id != this.turn) {
              return;
            }
            const card = Object.assign({}, this.me.cards[cardIndex]);
            const cardStatus = this.isCardValid(card);
            if (!cardStatus.valid) {
              this.cardInvalidReason = cardStatus.reason;
              return;
            }

            this.cardInvalidReason = null;
            
            this.game.players[this.me.id].cards.splice(cardIndex, 1)[0];
            card.playerId = this.me.id;
            
            this.game.trick.push(card);
            this.game.turnStack.pop();

            let playerDiff = [null, null, null, null];
            playerDiff[this.me.id] = {
              cards: this.game.players[this.me.id].cards,
            }

            socket.emit('sendGameChanges', { 
              trick: this.game.trick,
              turnStack: this.game.turnStack,
              players: playerDiff
            });
          },
          undoPlay: function(cardIndex) {
            const card = this.game.trick.splice(cardIndex, 1)[0];
            
            this.game.players[card.playerId].cards.push(card);
            this.game.turnStack.push(card.playerId);

            let playerDiff = [null, null, null, null];
            playerDiff[card.playerId] = {
              cards: this.game.players[card.playerId].cards
            }

            socket.emit('sendGameChanges', {
              trick: this.game.trick,
              turnStack: this.game.turnStack,
              players: playerDiff
            });
          },
          changeName: function() {
            if (this.me.name.length == 0) {
              return;
            }

            this.editingName = false;
            socket.emit('sendUpdatedPlayer', this.me.id, { name: this.me.name });
          },
          editName: function() {
            this.editingName = true;
          },
          endTrick: function() {
            const leadingSuit = this.game.trick[0].suit;
            const winningCards = this.game.trick
              .filter(card => card.suit == leadingSuit)
              .sort((a, b) => b.numericValue - a.numericValue);
            
            const winningPlayerId = winningCards[0].playerId;

            this.game.players[winningPlayerId].cardsFromTricks = this.game.players[winningPlayerId].cardsFromTricks.concat(this.game.trick);

            // round is over; assign points
            this.game.trick = [];

            if (this.game.players[0].cards == 0) {
              this.updatePoints();
              this.game.roundStatus = 'WAITING TO DEAL';
            } else {
              // winning player goes next
              this.setTurnStack(winningPlayerId);
            }

            let playerDiff = [null, null, null, null];
            for (let i = 0; i < 4; i++) {
              playerDiff[i] = {
                points: this.game.players[i].points
              }
            }

            playerDiff[winningPlayerId].cardsFromTricks = this.game.players[winningPlayerId].cardsFromTricks;

            socket.emit('sendGameChanges', {
              trick: [],
              players: playerDiff,
              roundStatus: this.game.roundStatus,
              turnStack: this.game.turnStack
            });
          },
          setTurnStack: function(playerId) {
            const reverseTurnOrder = [];
            for (let i = 0; i < 4; i++) {
              reverseTurnOrder.push(playerId);
              playerId = playerId == 3 ? 0 : playerId + 1;
            }

            this.game.turnStack = reverseTurnOrder.reverse();
          },
          join: function(playerId) {
            if (this.myPlayerId != null) {
              return;
            }

            this.game.players[playerId].claimed = socketId;
            myPlayerId = playerId;
            this.myPlayerId = playerId;

            socket.emit('sendUpdatedPlayer', playerId, { claimed: socketId });
          },
          updatePoints: function() {
            for (let i = 0; i < 4; i++) {
              const codes = this.game.players[i].cardsFromTricks.map(card => card.code);
              const hearts = this.game.players[i].cardsFromTricks.filter(card => card.suit == 'HEARTS').length;

              // -26 if they shot the moon
              if (hearts == 13 && codes.includes('QS') && codes.includes('JD')) {
                this.game.players[i].points -= 26;
              } else {
                // 1 point per heart
                this.game.players[i].points += hearts;

                // 13 extra points for QS
                if (codes.includes('QS')) {
                  this.game.players[i].points += 13;
                }
              }

              // -10 points for JD
              if (codes.includes('JD')) {
                this.game.players[i].points -= 10;
              }
            }
          },
          isCardValid: function(card) {
            // First trick
            if (this.game.players
              .map(p => p.cardsFromTricks)
              .reduce((a, b) => a.concat(b), [])
              .length == 0) {
              if (this.game.trick.length == 0) {
                // First card must be 2C
                if (card.code != '2C') { 
                  return { valid: false, reason: 'You must lead with the 2 of clubs' }; 
                }
              }

              // Cannot include cards for points
              if (card.suit == 'HEARTS' || card.code == 'QS') { 
                return { valid: false, reason: 'You may not play a card with points in the first trick' };
              }
            }

            if (this.game.trick.length > 0) {
              // Must match leading suit if the player has it
              const leadingSuit = this.game.trick[0].suit;
              if (card.suit != leadingSuit && this.me.cards.find(c => c.suit == leadingSuit)) { 
                return { valid: false, reason: `You must play one of your ${leadingSuit.toLowerCase()}, since that is the leading suit` }; 
              }
            } else if (card.suit == 'HEARTS') {
              console.log('a')
              // May not lead with heart until one has been played (or you only have hearts)
              if (!this.didBreakHearts && this.me.cards.find(c => c.suit != 'HEARTS')) { 
                return { valid: false, reason: 'Hearts have not yet been broken'}; 
              }
            }

            return { valid: true };
          },
          /****************************************************************************
           * Deck of cards helper methods
           ****************************************************************************/
          getDeck: function() {
            return fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')
              .then(res => {
                return res.json();
              });
          },
          shuffle: function() {
            return fetch(`https://deckofcardsapi.com/api/deck/${this.game.deck}/shuffle/`);
          },
          getCards: function() {
            return fetch(`https://deckofcardsapi.com/api/deck/${this.game.deck}/draw/?count=52`)
              .then(res => {
                return res.json();
              });
          },
          /****************************************************************************
           * Various helper methods
           ****************************************************************************/
          getNumericCardValue: function(card) {
            // numericValue helps with sorting
            switch (card.value) {
              case 'ACE':
                return 14;
              case 'KING':
                return 13;
              case 'QUEEN':
                return 12;
              case 'JACK':
                return 11;
              default:
                return parseInt(card.value);
            }
          },
          getTradePartner: function(round) {
            const playerId = this.me.id;
            const tradeType = round % 4;

            if (tradeType == 1) {
              // Trade to your left
              if (playerId == 3) { return 0; }
              return playerId + 1;
            } else if (tradeType == 2) {
              // Trade to your right
              if (playerId == 0) { return 3; }
              return playerId - 1;
            } else if (tradeType == 3) {
              // Trade across
              if (playerId < 2) { return playerId + 2; } 
              return playerId - 2;
            } else {
              // Do not trade
              return playerId;
            }
          },
          getTradeDescription: function(round) {
            const tradeType = round % 4;

            switch(tradeType) {
              case 1:
                return 'trade to the left';
              case 2:
                return 'trade to the right';
              case 3:
                return 'trade across the table';
              default:
                return 'hold'; 
            }
          },
          has2C: function() {
            return this.me.cards.concat(this.me.cardsReceived).find(c => c.code == '2C');
          },
          wonTrick: function() {
            if (this.game.trick.length < 4) { return false; }

            const leadingSuit = this.game.trick[0].suit;
            const winningCards = this.game.trick
              .filter(card => card.suit == leadingSuit)
              .sort((a, b) => b.numericValue - a.numericValue);
            
            return winningCards[0].playerId == this.me.id;
          }
        }
      });
    </script>
  </body>
</html>